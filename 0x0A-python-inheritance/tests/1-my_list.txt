===============================
1-my_list.py
===============================

Type class MyList that inherits from list.

=======

``print_sorted()`` Public instance method that prints the list,
but sorted (ascending sort)

::

	>>> MyList = __import__('1-my_list').MyList
	>>> type(MyList.__dict__['print_sorted'])
	<class 'function'>
	>>> ml = MyList()
	>>> type(ml)
	<class '1-my_list.MyList'>
	>>> print(ml.print_sorted)
	<bound method MyList.print_sorted of []>

Example list.

::

	>>> ml = MyList([3, 2, 1, 0])
	>>> ml.print_sorted()
	[0, 1, 2, 3]
	
Empty list test.

::

	>>> ml = MyList()
	>>> ml.print_sorted()
	[]

TypeError

::

	>>> ml.print_sorted([3, 2, 6])
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 2 were given

::

	>>> ml = MyList([1, 4, 2, 3, 5])
	>>> ml.print_sorted()
	[1, 2, 3, 4, 5]

::

	>>> ml = MyList([100, -10, 0, 1, -1, 10, -100])
	>>> ml.print_sorted()
	[-100, -10, -1, 0, 1, 10, 100]

TypeError

::

	>>> ml.__class__.print_sorted()
	Traceback (most recent call last):
	TypeError: print_sorted() missing 1 required positional argument: 'self'

TypeError

::

	>>> ml.print_sorted(4, 2, 3, 1)
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 5 were given

TypeError

::

	>>> ml = MyList([1, "a", "b", 2])
	>>> ml.print_sorted()
	Traceback (most recent call last):
	TypeError: unorderable types: str() < int()

Cases Checker

::

	>>> my_list = MyList()
	>>> my_list.append(5)
	>>> my_list.append(1)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(4)	
	>>> print(my_list)
	[5, 1, 2, 3, 4]
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]
	>>> my_list
	[5, 1, 2, 3, 4]


New list

::

	>>> my_list = MyList()
	>>> my_list.append(5)
	>>> my_list.append(1)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(4)

	>>> my_list.print_sorted
	<bound method MyList.print_sorted of [5, 1, 2, 3, 4]>

	>>> new_list = MyList()
	>>> new_list = 	my_list.print_sorted()
	[1, 2, 3, 4, 5]
	>>> print(new_list)
	None
